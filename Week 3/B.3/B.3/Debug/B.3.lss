
B.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000215  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c80  00000000  00000000  0000024d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000087e  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000034e  00000000  00000000  0000174b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000be  00000000  00000000  00001d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00001e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000018e  0000018e  000001e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000014e  0000014e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.timer1Init 0000001a  0000016c  0000016c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.setRed  00000008  00000186  00000186  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000006a  000000e4  000000e4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
   8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
   c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  4c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  68:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  6c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  70:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  74:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  7c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  80:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  84:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  88:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	ec e8       	ldi	r30, 0x8C	; 140
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	19 c0       	rjmp	.+50     	; 0xd2 <__do_clear_bss+0x8>
  a0:	b7 91       	elpm	r27, Z+
  a2:	a7 91       	elpm	r26, Z+
  a4:	37 91       	elpm	r19, Z+
  a6:	27 91       	elpm	r18, Z+
  a8:	07 91       	elpm	r16, Z+
  aa:	07 fd       	sbrc	r16, 7
  ac:	0e c0       	rjmp	.+28     	; 0xca <__do_clear_bss>
  ae:	97 91       	elpm	r25, Z+
  b0:	87 91       	elpm	r24, Z+
  b2:	ef 01       	movw	r28, r30
  b4:	f9 2f       	mov	r31, r25
  b6:	e8 2f       	mov	r30, r24
  b8:	0b bf       	out	0x3b, r16	; 59
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x22>
  c4:	fe 01       	movw	r30, r28
  c6:	1b be       	out	0x3b, r1	; 59
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <__do_clear_bss+0x8>

000000ca <__do_clear_bss>:
  ca:	1d 92       	st	X+, r1
  cc:	a2 17       	cp	r26, r18
  ce:	b3 07       	cpc	r27, r19
  d0:	e1 f7       	brne	.-8      	; 0xca <__do_clear_bss>
  d2:	ec 38       	cpi	r30, 0x8C	; 140
  d4:	f4 07       	cpc	r31, r20
  d6:	21 f7       	brne	.-56     	; 0xa0 <__do_copy_data+0x8>
  d8:	0e 94 72 00 	call	0xe4	; 0xe4 <_etext>
  dc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>

Disassembly of section .text:

0000018e <__bad_interrupt>:
 18e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000014e <wait>:
unsigned int sCount=0, minutes=0, hours=0;

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms ) {
	for (int tms=0; tms<ms; tms++) {
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	08 c0       	rjmp	.+16     	; 0x164 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	ef ec       	ldi	r30, 0xCF	; 207
 156:	f7 e0       	ldi	r31, 0x07	; 7
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <wait+0xa>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <wait+0x10>
 15e:	00 00       	nop
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	3f 4f       	sbci	r19, 0xFF	; 255
 164:	28 17       	cp	r18, r24
 166:	39 07       	cpc	r19, r25
 168:	ac f3       	brlt	.-22     	; 0x154 <wait+0x6>
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
 16a:	08 95       	ret

Disassembly of section .text.timer1Init:

0000016c <timer1Init>:

// Initialize timer 1: fast PWM at pin PORTB.6 (hundredth ms)
void timer1Init( void ) {
	OCR1A = 0;					// RED, default, off
 16c:	1b bc       	out	0x2b, r1	; 43
 16e:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;					// GREEN, default, off
 170:	19 bc       	out	0x29, r1	; 41
 172:	18 bc       	out	0x28, r1	; 40
	OCR1C = 0;					// BLUE, default, off
 174:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 178:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	TCCR1A = 0b10101001;		// compare output OC1A,OC1B,OC1C
 17c:	89 ea       	ldi	r24, 0xA9	; 169
 17e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00001011;		// fast PWM 8 bit, prescaler=64, RUN
 180:	8b e0       	ldi	r24, 0x0B	; 11
 182:	8e bd       	out	0x2e, r24	; 46
 184:	08 95       	ret

Disassembly of section .text.setRed:

00000186 <setRed>:
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red ) {
	OCR1A = red;
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9b bd       	out	0x2b, r25	; 43
 18a:	8a bd       	out	0x2a, r24	; 42
 18c:	08 95       	ret

Disassembly of section .text.main:

000000e4 <main>:
// void setGreen( unsigned char green)
// void setBlue( unsigned char blue)

// Main program: Counting on T1
int main( void ) {
	DDRB = 0xFF;					// set PORTB for compare output
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	87 bb       	out	0x17, r24	; 23
	timer1Init();
  e8:	0e 94 b6 00 	call	0x16c	; 0x16c <timer1Init>
	wait(100);
  ec:	84 e6       	ldi	r24, 0x64	; 100
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 a7 00 	call	0x14e	; 0x14e <wait>

	while (1) {
		int delta = 1;
		setRed (0);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 c3 00 	call	0x186	; 0x186 <setRed>

		// change some colors
		// RED
		for (int red = 0; red<=255; red+=delta) {
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	10 e0       	ldi	r17, 0x00	; 0
	DDRB = 0xFF;					// set PORTB for compare output
	timer1Init();
	wait(100);

	while (1) {
		int delta = 1;
  fe:	c1 e0       	ldi	r28, 0x01	; 1
 100:	d0 e0       	ldi	r29, 0x00	; 0
		setRed (0);

		// change some colors
		// RED
		for (int red = 0; red<=255; red+=delta) {
 102:	0a c0       	rjmp	.+20     	; 0x118 <main+0x34>
			setRed( red );				// 8-bits PWM on pin OCR1a
 104:	80 2f       	mov	r24, r16
 106:	0e 94 c3 00 	call	0x186	; 0x186 <setRed>
			delta += 2;					// progressive steps up
 10a:	22 96       	adiw	r28, 0x02	; 2
			wait(100);					// delay of 100 ms (busy waiting)
 10c:	84 e6       	ldi	r24, 0x64	; 100
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 a7 00 	call	0x14e	; 0x14e <wait>
		int delta = 1;
		setRed (0);

		// change some colors
		// RED
		for (int red = 0; red<=255; red+=delta) {
 114:	0c 0f       	add	r16, r28
 116:	1d 1f       	adc	r17, r29
 118:	0f 3f       	cpi	r16, 0xFF	; 255
 11a:	11 05       	cpc	r17, r1
 11c:	99 f3       	breq	.-26     	; 0x104 <main+0x20>
 11e:	94 f3       	brlt	.-28     	; 0x104 <main+0x20>
 120:	0f ef       	ldi	r16, 0xFF	; 255
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	0a c0       	rjmp	.+20     	; 0x13a <main+0x56>
			setRed( red );				// 8-bits PWM on pin OCR1a
			delta += 2;					// progressive steps up
			wait(100);					// delay of 100 ms (busy waiting)
		}
		for (int red = 255; red>=0; red-=delta) {
			setRed( red );				// 8-bits PWM on pin OCR1a
 126:	80 2f       	mov	r24, r16
 128:	0e 94 c3 00 	call	0x186	; 0x186 <setRed>
			delta -= 2;					// progressive steps down
 12c:	22 97       	sbiw	r28, 0x02	; 2
			wait(100);					// delay of 100 ms (busy waiting)
 12e:	84 e6       	ldi	r24, 0x64	; 100
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 a7 00 	call	0x14e	; 0x14e <wait>
		for (int red = 0; red<=255; red+=delta) {
			setRed( red );				// 8-bits PWM on pin OCR1a
			delta += 2;					// progressive steps up
			wait(100);					// delay of 100 ms (busy waiting)
		}
		for (int red = 255; red>=0; red-=delta) {
 136:	0c 1b       	sub	r16, r28
 138:	1d 0b       	sbc	r17, r29
 13a:	11 23       	and	r17, r17
 13c:	a4 f7       	brge	.-24     	; 0x126 <main+0x42>
			setRed( red );				// 8-bits PWM on pin OCR1a
			delta -= 2;					// progressive steps down
			wait(100);					// delay of 100 ms (busy waiting)
		}
		setRed( 0 );
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 c3 00 	call	0x186	; 0x186 <setRed>
		delta = 1;
		wait(100);
 144:	84 e6       	ldi	r24, 0x64	; 100
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 a7 00 	call	0x14e	; 0x14e <wait>


		// WHITE
		// for (int white = 0; white<=255; white += delta)
		// . . .
	}
 14c:	d3 cf       	rjmp	.-90     	; 0xf4 <main+0x10>
