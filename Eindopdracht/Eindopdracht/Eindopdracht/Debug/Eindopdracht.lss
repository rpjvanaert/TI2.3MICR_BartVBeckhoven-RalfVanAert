
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000034a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000034a  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000379  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ca6  00000000  00000000  000003c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089c  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ea  00000000  00000000  00001903  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b6  00000000  00000000  00001fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002097  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002d2  000002d2  00000346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.wait    0000001e  0000029a  0000029a  0000030e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.adc_set_port 00000006  000002cc  000002cc  00000340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.adc_read_port 00000014  000002b8  000002b8  0000032c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.servos_init 0000005a  00000240  00000240  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.servos_step 00000082  000001be  000001be  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    000000d4  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
   8:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
   c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  10:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  14:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  18:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  1c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  20:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  24:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  28:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  2c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  30:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  34:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  38:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  3c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  40:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  44:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  48:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  4c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  50:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  54:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  58:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  5c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  60:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  64:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  68:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  6c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  70:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  74:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  78:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  7c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  80:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  84:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  88:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 08       	sbc	r0, r1
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 75 00 	call	0xea	; 0xea <_etext>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

000002d2 <__bad_interrupt>:
 2d2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000029a <wait>:
int servo2_goal;

// wait busy waiting for ms in milliseconds
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	ef ec       	ldi	r30, 0xCF	; 207
 2a2:	f7 e0       	ldi	r31, 0x07	; 7
 2a4:	31 97       	sbiw	r30, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <wait+0xa>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <wait+0x10>
 2aa:	00 00       	nop
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	3f 4f       	sbci	r19, 0xFF	; 255
 2b0:	28 17       	cp	r18, r24
 2b2:	39 07       	cpc	r19, r25
 2b4:	ac f3       	brlt	.-22     	; 0x2a0 <wait+0x6>
	{
		_delay_ms( 1 );
	}
}
 2b6:	08 95       	ret

Disassembly of section .text.adc_set_port:

000002cc <adc_set_port>:

// Initialize ADC for given pin (0b0000 or 0b0001
void adc_set_port( int bit )
{
	ADMUX = (0b01100000 | bit); // AREF = VCC, result left adjusted, channel1 at PF1.
 2cc:	80 66       	ori	r24, 0x60	; 96
 2ce:	87 b9       	out	0x07, r24	; 7
 2d0:	08 95       	ret

Disassembly of section .text.adc_read_port:

000002b8 <adc_read_port>:
}

// Method that sets adc port, reads adc on that port and then returns value of the port
int adc_read_port ( int bit )
{
	adc_set_port(bit);			// Set port to bit ( PF0 to PF5)
 2b8:	0e 94 66 01 	call	0x2cc	; 0x2cc <adc_set_port>
	ADCSRA |= BIT(6);			// Start ADC
 2bc:	86 b1       	in	r24, 0x06	; 6
 2be:	80 64       	ori	r24, 0x40	; 64
 2c0:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & BIT(6));	// Wait for completion
 2c2:	36 99       	sbic	0x06, 6	; 6
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <adc_read_port+0xa>
	return ADCH;				// Return MSB (bit 9:2) of ADC
 2c6:	85 b1       	in	r24, 0x05	; 5
}
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	08 95       	ret

Disassembly of section .text.servos_init:

00000240 <servos_init>:


// Initialize Servo for
void servos_init( void )
{
	servo1_state = SERVO_MIN_STATE;
 240:	88 ee       	ldi	r24, 0xE8	; 232
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 248:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	servo2_state = SERVO_MIN_STATE;
 24c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <servo2_state+0x1>
 250:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo2_state>
	
	DDRD = 0xFF;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
 258:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF;
 25a:	82 b9       	out	0x02, r24	; 2
	ICR1 = 20000;
 25c:	80 e2       	ldi	r24, 0x20	; 32
 25e:	9e e4       	ldi	r25, 0x4E	; 78
 260:	97 bd       	out	0x27, r25	; 39
 262:	86 bd       	out	0x26, r24	; 38
	ICR3 = 20000;
 264:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 268:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	
	OCR1A = servo1_state;
 26c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 270:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 274:	9b bd       	out	0x2b, r25	; 43
 276:	8a bd       	out	0x2a, r24	; 42
	OCR3A = servo1_state;
 278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 280:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 284:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	TCCR1A = 0b10000010;
 288:	92 e8       	ldi	r25, 0x82	; 130
 28a:	9f bd       	out	0x2f, r25	; 47
	TCCR1B = 0b00011010;
 28c:	8a e1       	ldi	r24, 0x1A	; 26
 28e:	8e bd       	out	0x2e, r24	; 46
	
	TCCR3A = 0b10000010;
 290:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0b00011010;
 294:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 298:	08 95       	ret

Disassembly of section .text.servos_step:

000001be <servos_step>:
	
}
*/

void servos_step(){
	if (servo1_state < servo1_goal){
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <servo1_goal>
 1ca:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <servo1_goal+0x1>
 1ce:	82 17       	cp	r24, r18
 1d0:	93 07       	cpc	r25, r19
 1d2:	34 f4       	brge	.+12     	; 0x1e0 <servos_step+0x22>
		servo1_state += 1;
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <servos_step+0x32>
	} else if (servo1_state > servo1_goal){
 1e0:	28 17       	cp	r18, r24
 1e2:	39 07       	cpc	r19, r25
 1e4:	2c f4       	brge	.+10     	; 0x1f0 <servos_step+0x32>
		servo1_state -= 1;
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	if (servo2_state < servo2_goal){
 1f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo2_state>
 1f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <servo2_state+0x1>
 1f8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <servo2_goal>
 1fc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <servo2_goal+0x1>
 200:	82 17       	cp	r24, r18
 202:	93 07       	cpc	r25, r19
 204:	34 f4       	brge	.+12     	; 0x212 <servos_step+0x54>
		servo2_state += 1;
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <servo2_state+0x1>
 20c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo2_state>
 210:	08 c0       	rjmp	.+16     	; 0x222 <servos_step+0x64>
	} else if (servo2_state > servo2_goal){
 212:	28 17       	cp	r18, r24
 214:	39 07       	cpc	r19, r25
 216:	2c f4       	brge	.+10     	; 0x222 <servos_step+0x64>
		servo2_state -= 1;
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <servo2_state+0x1>
 21e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo2_state>
	}
	
	OCR1A = servo1_state;
 222:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 226:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 22a:	9b bd       	out	0x2b, r25	; 43
 22c:	8a bd       	out	0x2a, r24	; 42
	OCR3A = servo2_state;
 22e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo2_state>
 232:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <servo2_state+0x1>
 236:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 23a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 23e:	08 95       	ret

Disassembly of section .text.main:

000000ea <main>:



int main(void)
{
	servos_init();
  ea:	0e 94 20 01 	call	0x240	; 0x240 <servos_init>
	ADCSRA = 0b10000110; // ADC enabled, no interrupt, no free running, division by 64.
  ee:	86 e8       	ldi	r24, 0x86	; 134
  f0:	86 b9       	out	0x06, r24	; 6
	DDRF = 0x00;
  f2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  fa:	87 bb       	out	0x17, r24	; 23
	
	wait(1000);
  fc:	88 ee       	ldi	r24, 0xE8	; 232
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	0e 94 4d 01 	call	0x29a	; 0x29a <wait>
	
	servo1_goal = 2000;
 104:	80 ed       	ldi	r24, 0xD0	; 208
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servo1_goal+0x1>
 10c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servo1_goal>
	servo2_goal = 2000;
 110:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <servo2_goal+0x1>
 114:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servo2_goal>
	
	servo1_state = servo1_goal;
 118:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	servo2_state = servo2_goal;
 120:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <servo2_state+0x1>
 124:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <servo2_state>
	
	OCR1A = servo1_goal;
 128:	9b bd       	out	0x2b, r25	; 43
 12a:	8a bd       	out	0x2a, r24	; 42
	OCR3A = servo2_goal;
 12c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servo2_goal>
 130:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <servo2_goal+0x1>
 134:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 138:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	
    while(1)
    {		
		PORTA = adc_read_port(POT_METER_1);
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <adc_read_port>
 144:	8b bb       	out	0x1b, r24	; 27
		PORTB = adc_read_port(POT_METER_2);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <adc_read_port>
 14e:	88 bb       	out	0x18, r24	; 24
		OCR1A = 1700;
		
		wait(2500);
		*/
		
		servos_step();
 150:	0e 94 df 00 	call	0x1be	; 0x1be <servos_step>
		
		wait(10000);
 154:	80 e1       	ldi	r24, 0x10	; 16
 156:	97 e2       	ldi	r25, 0x27	; 39
 158:	0e 94 4d 01 	call	0x29a	; 0x29a <wait>
		
		if (servo1_state == SERVO_MAX_STATE){
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	80 3d       	cpi	r24, 0xD0	; 208
 166:	27 e0       	ldi	r18, 0x07	; 7
 168:	92 07       	cpc	r25, r18
 16a:	39 f4       	brne	.+14     	; 0x17a <main+0x90>
			servo1_goal = SERVO_MIN_STATE;
 16c:	88 ee       	ldi	r24, 0xE8	; 232
 16e:	93 e0       	ldi	r25, 0x03	; 3
 170:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servo1_goal+0x1>
 174:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servo1_goal>
 178:	09 c0       	rjmp	.+18     	; 0x18c <main+0xa2>
		} else if (servo1_state == SERVO_MIN_STATE){
 17a:	88 3e       	cpi	r24, 0xE8	; 232
 17c:	93 40       	sbci	r25, 0x03	; 3
 17e:	31 f4       	brne	.+12     	; 0x18c <main+0xa2>
			servo1_goal = SERVO_MAX_STATE;
 180:	80 ed       	ldi	r24, 0xD0	; 208
 182:	97 e0       	ldi	r25, 0x07	; 7
 184:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servo1_goal+0x1>
 188:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servo1_goal>
		}
		
		if (servo2_state == SERVO_MAX_STATE){
 18c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <servo2_state>
 190:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <servo2_state+0x1>
 194:	80 3d       	cpi	r24, 0xD0	; 208
 196:	27 e0       	ldi	r18, 0x07	; 7
 198:	92 07       	cpc	r25, r18
 19a:	39 f4       	brne	.+14     	; 0x1aa <main+0xc0>
			servo2_goal = SERVO_MIN_STATE;
 19c:	88 ee       	ldi	r24, 0xE8	; 232
 19e:	93 e0       	ldi	r25, 0x03	; 3
 1a0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <servo2_goal+0x1>
 1a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servo2_goal>
 1a8:	c9 cf       	rjmp	.-110    	; 0x13c <main+0x52>
			} else if (servo2_state == SERVO_MIN_STATE){
 1aa:	88 3e       	cpi	r24, 0xE8	; 232
 1ac:	93 40       	sbci	r25, 0x03	; 3
 1ae:	31 f6       	brne	.-116    	; 0x13c <main+0x52>
			servo2_goal = SERVO_MAX_STATE;
 1b0:	80 ed       	ldi	r24, 0xD0	; 208
 1b2:	97 e0       	ldi	r25, 0x07	; 7
 1b4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <servo2_goal+0x1>
 1b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servo2_goal>
 1bc:	bf cf       	rjmp	.-130    	; 0x13c <main+0x52>
