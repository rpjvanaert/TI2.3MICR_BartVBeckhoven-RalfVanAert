
C1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  000002ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000fbc  00000000  00000000  0000037f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008bf  00000000  00000000  0000133b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004b7  00000000  00000000  00001bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000288  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000264  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000278  00000278  000002cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002720  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000001f2  000001f2  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.spi_masterInit 00000016  00000244  00000244  00000298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.spi_write 00000008  00000270  00000270  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.spi_slaveSelect 00000018  0000022c  0000022c  00000280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_slaveDeSelect 00000016  0000025a  0000025a  000002ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.spi_writeWord 00000026  000001cc  000001cc  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.displayDriverInit 00000062  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.numberOfDigits 0000001c  00000210  00000210  00000264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.writeLedDisplay 0000004a  00000106  00000106  0000015a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    0000002c  00000150  00000150  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.libgcc.div 00000028  0000017c  0000017c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.libgcc.div 00000028  000001a4  000001a4  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
   8:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
   c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  10:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  14:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  18:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  1c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  20:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  24:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  28:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  2c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  30:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  34:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  38:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  3c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  40:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  44:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  48:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  4c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  50:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  54:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  58:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  5c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  60:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  64:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  68:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  6c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  70:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  74:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  78:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  7c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  80:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  84:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
  88:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000278 <__bad_interrupt>:
 278:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000001f2 <wait>:
{
	SPDR = data; // Load byte --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); // Wait for transmission complete
	data = SPDR; // New received data (eventually, MISO) in SPDR
	return data; // Return received byte
}
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	08 c0       	rjmp	.+16     	; 0x208 <wait+0x16>
 1f8:	ef ec       	ldi	r30, 0xCF	; 207
 1fa:	f7 e0       	ldi	r31, 0x07	; 7
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <wait+0xa>
 200:	00 c0       	rjmp	.+0      	; 0x202 <wait+0x10>
 202:	00 00       	nop
 204:	2f 5f       	subi	r18, 0xFF	; 255
 206:	3f 4f       	sbci	r19, 0xFF	; 255
 208:	28 17       	cp	r18, r24
 20a:	39 07       	cpc	r19, r25
 20c:	ac f3       	brlt	.-22     	; 0x1f8 <wait+0x6>
 20e:	08 95       	ret

Disassembly of section .text.spi_masterInit:

00000244 <spi_masterInit>:
	for (int i=0; i<ms; i++)
	_delay_ms(1);
}
void spi_masterInit(void)
{
	DDR_SPI = 0xff; // All pins output: MOSI, SCK, SS, SS_display
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~BIT(SPI_MISO); // except: MISO input
 248:	87 b3       	in	r24, 0x17	; 23
 24a:	87 7f       	andi	r24, 0xF7	; 247
 24c:	87 bb       	out	0x17, r24	; 23
	PORT_SPI |= BIT(SPI_SS); // SS_ADC == 1: deselect slave
 24e:	88 b3       	in	r24, 0x18	; 24
 250:	81 60       	ori	r24, 0x01	; 1
 252:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1); // or: SPCR = 0b11010010;
 254:	82 e5       	ldi	r24, 0x52	; 82
 256:	8d b9       	out	0x0d, r24	; 13
 258:	08 95       	ret

Disassembly of section .text.spi_write:

00000270 <spi_write>:
	// bitrate=125kHz, Mode = 0: CPOL=0, CPPH=0
}
// Write a byte from master to slave
void spi_write( unsigned char data )
{
	SPDR = data; // Load byte --> starts transmission
 270:	8f b9       	out	0x0f, r24	; 15
	while( !(SPSR & BIT(SPIF)) ); // Wait for transmission complete
 272:	77 9b       	sbis	0x0e, 7	; 14
 274:	fe cf       	rjmp	.-4      	; 0x272 <spi_write+0x2>
}
 276:	08 95       	ret

Disassembly of section .text.spi_slaveSelect:

0000022c <spi_slaveSelect>:
	return data; // Return received byte
}
// Select device on pinnumer PORTB
void spi_slaveSelect(unsigned char chipNumber)
{
	PORTB &= ~BIT(chipNumber);
 22c:	98 b3       	in	r25, 0x18	; 24
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <spi_slaveSelect+0xc>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	8a 95       	dec	r24
 23a:	e2 f7       	brpl	.-8      	; 0x234 <spi_slaveSelect+0x8>
 23c:	20 95       	com	r18
 23e:	29 23       	and	r18, r25
 240:	28 bb       	out	0x18, r18	; 24
 242:	08 95       	ret

Disassembly of section .text.spi_slaveDeSelect:

0000025a <spi_slaveDeSelect>:
}
// Deselect device on pinnumer PORTB
void spi_slaveDeSelect(unsigned char chipNumber)
{
	PORTB |= BIT(chipNumber);
 25a:	98 b3       	in	r25, 0x18	; 24
 25c:	21 e0       	ldi	r18, 0x01	; 1
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <spi_slaveDeSelect+0xc>
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	8a 95       	dec	r24
 268:	e2 f7       	brpl	.-8      	; 0x262 <spi_slaveDeSelect+0x8>
 26a:	29 2b       	or	r18, r25
 26c:	28 bb       	out	0x18, r18	; 24
 26e:	08 95       	ret

Disassembly of section .text.spi_writeWord:

000001cc <spi_writeWord>:
{
	SPDR = data; // Load byte --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); // Wait for transmission complete
	data = SPDR; // New received data (eventually, MISO) in SPDR
	return data; // Return received byte
}
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	d8 2f       	mov	r29, r24
 1d2:	c6 2f       	mov	r28, r22
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 16 01 	call	0x22c	; 0x22c <spi_slaveSelect>
 1da:	8d 2f       	mov	r24, r29
 1dc:	0e 94 38 01 	call	0x270	; 0x270 <spi_write>
 1e0:	8c 2f       	mov	r24, r28
 1e2:	0e 94 38 01 	call	0x270	; 0x270 <spi_write>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 2d 01 	call	0x25a	; 0x25a <spi_slaveDeSelect>
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

Disassembly of section .text.displayDriverInit:

000000a4 <displayDriverInit>:
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 16 01 	call	0x22c	; 0x22c <spi_slaveSelect>
  aa:	89 e0       	ldi	r24, 0x09	; 9
  ac:	0e 94 38 01 	call	0x270	; 0x270 <spi_write>
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	0e 94 38 01 	call	0x270	; 0x270 <spi_write>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 2d 01 	call	0x25a	; 0x25a <spi_slaveDeSelect>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 16 01 	call	0x22c	; 0x22c <spi_slaveSelect>
  c2:	8a e0       	ldi	r24, 0x0A	; 10
  c4:	0e 94 38 01 	call	0x270	; 0x270 <spi_write>
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	0e 94 38 01 	call	0x270	; 0x270 <spi_write>
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 2d 01 	call	0x25a	; 0x25a <spi_slaveDeSelect>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 16 01 	call	0x22c	; 0x22c <spi_slaveSelect>
  da:	8b e0       	ldi	r24, 0x0B	; 11
  dc:	0e 94 38 01 	call	0x270	; 0x270 <spi_write>
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 38 01 	call	0x270	; 0x270 <spi_write>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 2d 01 	call	0x25a	; 0x25a <spi_slaveDeSelect>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 16 01 	call	0x22c	; 0x22c <spi_slaveSelect>
  f2:	8c e0       	ldi	r24, 0x0C	; 12
  f4:	0e 94 38 01 	call	0x270	; 0x270 <spi_write>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 38 01 	call	0x270	; 0x270 <spi_write>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 2d 01 	call	0x25a	; 0x25a <spi_slaveDeSelect>
 104:	08 95       	ret

Disassembly of section .text.numberOfDigits:

00000210 <numberOfDigits>:
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	07 c0       	rjmp	.+14     	; 0x224 <numberOfDigits+0x14>
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	6a e0       	ldi	r22, 0x0A	; 10
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	0e 94 be 00 	call	0x17c	; 0x17c <__divmodhi4>
 222:	cb 01       	movw	r24, r22
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	b9 f7       	brne	.-18     	; 0x216 <numberOfDigits+0x6>
 228:	c9 01       	movw	r24, r18
 22a:	08 95       	ret

Disassembly of section .text.writeLedDisplay:

00000106 <writeLedDisplay>:
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	08 2f       	mov	r16, r24
 114:	19 2f       	mov	r17, r25
 116:	0e 94 08 01 	call	0x210	; 0x210 <numberOfDigits>
 11a:	7c 01       	movw	r14, r24
 11c:	c1 e0       	ldi	r28, 0x01	; 1
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	0d c0       	rjmp	.+26     	; 0x13c <writeLedDisplay+0x36>
 122:	80 2f       	mov	r24, r16
 124:	91 2f       	mov	r25, r17
 126:	6a e0       	ldi	r22, 0x0A	; 10
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	0e 94 be 00 	call	0x17c	; 0x17c <__divmodhi4>
 12e:	06 2f       	mov	r16, r22
 130:	17 2f       	mov	r17, r23
 132:	68 2f       	mov	r22, r24
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 e6 00 	call	0x1cc	; 0x1cc <spi_writeWord>
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	ec 16       	cp	r14, r28
 13e:	fd 06       	cpc	r15, r29
 140:	84 f7       	brge	.-32     	; 0x122 <writeLedDisplay+0x1c>
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	08 95       	ret

Disassembly of section .text.main:

00000150 <main>:
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	87 bb       	out	0x17, r24	; 23
 154:	0e 94 22 01 	call	0x244	; 0x244 <spi_masterInit>
 158:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
 15c:	c1 e0       	ldi	r28, 0x01	; 1
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	08 c0       	rjmp	.+16     	; 0x172 <main+0x22>
 162:	ce 01       	movw	r24, r28
 164:	0e 94 83 00 	call	0x106	; 0x106 <writeLedDisplay>
 168:	84 e1       	ldi	r24, 0x14	; 20
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <wait>
 170:	21 96       	adiw	r28, 0x01	; 1
 172:	c8 35       	cpi	r28, 0x58	; 88
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	d8 07       	cpc	r29, r24
 178:	a4 f3       	brlt	.-24     	; 0x162 <main+0x12>
 17a:	f0 cf       	rjmp	.-32     	; 0x15c <main+0xc>

Disassembly of section .text.libgcc.div:

0000017c <__divmodhi4>:
 17c:	97 fb       	bst	r25, 7
 17e:	07 2e       	mov	r0, r23
 180:	16 f4       	brtc	.+4      	; 0x186 <__divmodhi4+0xa>
 182:	00 94       	com	r0
 184:	07 d0       	rcall	.+14     	; 0x194 <__divmodhi4_neg1>
 186:	77 fd       	sbrc	r23, 7
 188:	09 d0       	rcall	.+18     	; 0x19c <__divmodhi4_neg2>
 18a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodhi4>
 18e:	07 fc       	sbrc	r0, 7
 190:	05 d0       	rcall	.+10     	; 0x19c <__divmodhi4_neg2>
 192:	3e f4       	brtc	.+14     	; 0x1a2 <__divmodhi4_exit>

00000194 <__divmodhi4_neg1>:
 194:	90 95       	com	r25
 196:	81 95       	neg	r24
 198:	9f 4f       	sbci	r25, 0xFF	; 255
 19a:	08 95       	ret

0000019c <__divmodhi4_neg2>:
 19c:	70 95       	com	r23
 19e:	61 95       	neg	r22
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255

000001a2 <__divmodhi4_exit>:
 1a2:	08 95       	ret

Disassembly of section .text.libgcc.div:

000001a4 <__udivmodhi4>:
 1a4:	aa 1b       	sub	r26, r26
 1a6:	bb 1b       	sub	r27, r27
 1a8:	51 e1       	ldi	r21, 0x11	; 17
 1aa:	07 c0       	rjmp	.+14     	; 0x1ba <__udivmodhi4_ep>

000001ac <__udivmodhi4_loop>:
 1ac:	aa 1f       	adc	r26, r26
 1ae:	bb 1f       	adc	r27, r27
 1b0:	a6 17       	cp	r26, r22
 1b2:	b7 07       	cpc	r27, r23
 1b4:	10 f0       	brcs	.+4      	; 0x1ba <__udivmodhi4_ep>
 1b6:	a6 1b       	sub	r26, r22
 1b8:	b7 0b       	sbc	r27, r23

000001ba <__udivmodhi4_ep>:
 1ba:	88 1f       	adc	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	5a 95       	dec	r21
 1c0:	a9 f7       	brne	.-22     	; 0x1ac <__udivmodhi4_loop>
 1c2:	80 95       	com	r24
 1c4:	90 95       	com	r25
 1c6:	bc 01       	movw	r22, r24
 1c8:	cd 01       	movw	r24, r26
 1ca:	08 95       	ret
