
C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000290  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  000002bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001038  00000000  00000000  00000327  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008a0  00000000  00000000  0000135f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004af  00000000  00000000  00001bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000bc  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000288  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c9  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  000024bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000238  00000238  0000028c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002518  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000001ce  000001ce  00000222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.spi_masterInit 00000016  00000204  00000204  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.spi_write 00000008  00000230  00000230  00000284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.spi_slaveSelect 00000018  000001ec  000001ec  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_slaveDeSelect 00000016  0000021a  0000021a  0000026e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.displayDriverInit 00000062  0000016c  0000016c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    000000c8  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.wait:

000001ce <wait>:
{
	SPDR = data; // Load byte --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); // Wait for transmission complete
	data = SPDR; // New received data (eventually, MISO) in SPDR
	return data; // Return received byte
}
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <wait+0x16>
 1d4:	ef ec       	ldi	r30, 0xCF	; 207
 1d6:	f7 e0       	ldi	r31, 0x07	; 7
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <wait+0xa>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <wait+0x10>
 1de:	00 00       	nop
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	28 17       	cp	r18, r24
 1e6:	39 07       	cpc	r19, r25
 1e8:	ac f3       	brlt	.-22     	; 0x1d4 <wait+0x6>
 1ea:	08 95       	ret

Disassembly of section .text.spi_masterInit:

00000204 <spi_masterInit>:
	for (int i=0; i<ms; i++)
	_delay_ms(1);
}
void spi_masterInit(void)
{
	DDR_SPI = 0xff; // All pins output: MOSI, SCK, SS, SS_display
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~BIT(SPI_MISO); // except: MISO input
 208:	87 b3       	in	r24, 0x17	; 23
 20a:	87 7f       	andi	r24, 0xF7	; 247
 20c:	87 bb       	out	0x17, r24	; 23
	PORT_SPI |= BIT(SPI_SS); // SS_ADC == 1: deselect slave
 20e:	88 b3       	in	r24, 0x18	; 24
 210:	81 60       	ori	r24, 0x01	; 1
 212:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1); // or: SPCR = 0b11010010;
 214:	82 e5       	ldi	r24, 0x52	; 82
 216:	8d b9       	out	0x0d, r24	; 13
 218:	08 95       	ret

Disassembly of section .text.spi_write:

00000230 <spi_write>:
	// bitrate=125kHz, Mode = 0: CPOL=0, CPPH=0
}
// Write a byte from master to slave
void spi_write( unsigned char data )
{
	SPDR = data; // Load byte --> starts transmission
 230:	8f b9       	out	0x0f, r24	; 15
	while( !(SPSR & BIT(SPIF)) ); // Wait for transmission complete
 232:	77 9b       	sbis	0x0e, 7	; 14
 234:	fe cf       	rjmp	.-4      	; 0x232 <spi_write+0x2>
}
 236:	08 95       	ret

Disassembly of section .text.spi_slaveSelect:

000001ec <spi_slaveSelect>:
	return data; // Return received byte
}
// Select device on pinnumer PORTB
void spi_slaveSelect(unsigned char chipNumber)
{
	PORTB &= ~BIT(chipNumber);
 1ec:	98 b3       	in	r25, 0x18	; 24
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <spi_slaveSelect+0xc>
 1f4:	22 0f       	add	r18, r18
 1f6:	33 1f       	adc	r19, r19
 1f8:	8a 95       	dec	r24
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <spi_slaveSelect+0x8>
 1fc:	20 95       	com	r18
 1fe:	29 23       	and	r18, r25
 200:	28 bb       	out	0x18, r18	; 24
 202:	08 95       	ret

Disassembly of section .text.spi_slaveDeSelect:

0000021a <spi_slaveDeSelect>:
}
// Deselect device on pinnumer PORTB
void spi_slaveDeSelect(unsigned char chipNumber)
{
	PORTB |= BIT(chipNumber);
 21a:	98 b3       	in	r25, 0x18	; 24
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <spi_slaveDeSelect+0xc>
 222:	22 0f       	add	r18, r18
 224:	33 1f       	adc	r19, r19
 226:	8a 95       	dec	r24
 228:	e2 f7       	brpl	.-8      	; 0x222 <spi_slaveDeSelect+0x8>
 22a:	29 2b       	or	r18, r25
 22c:	28 bb       	out	0x18, r18	; 24
 22e:	08 95       	ret

Disassembly of section .text.displayDriverInit:

0000016c <displayDriverInit>:
{
	SPDR = data; // Load byte --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); // Wait for transmission complete
	data = SPDR; // New received data (eventually, MISO) in SPDR
	return data; // Return received byte
}
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_slaveSelect>
 172:	89 e0       	ldi	r24, 0x09	; 9
 174:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 0d 01 	call	0x21a	; 0x21a <spi_slaveDeSelect>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_slaveSelect>
 18a:	8a e0       	ldi	r24, 0x0A	; 10
 18c:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 0d 01 	call	0x21a	; 0x21a <spi_slaveDeSelect>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_slaveSelect>
 1a2:	8b e0       	ldi	r24, 0x0B	; 11
 1a4:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 0d 01 	call	0x21a	; 0x21a <spi_slaveDeSelect>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_slaveSelect>
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 0d 01 	call	0x21a	; 0x21a <spi_slaveDeSelect>
 1cc:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:
  a4:	cf 93       	push	r28
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	0e 94 02 01 	call	0x204	; 0x204 <spi_masterInit>
  ae:	0e 94 b6 00 	call	0x16c	; 0x16c <displayDriverInit>
  b2:	c1 e0       	ldi	r28, 0x01	; 1
  b4:	0d c0       	rjmp	.+26     	; 0xd0 <main+0x2c>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_slaveSelect>
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 0d 01 	call	0x21a	; 0x21a <spi_slaveDeSelect>
  ce:	cf 5f       	subi	r28, 0xFF	; 255
  d0:	c5 30       	cpi	r28, 0x05	; 5
  d2:	88 f3       	brcs	.-30     	; 0xb6 <main+0x12>
  d4:	88 ee       	ldi	r24, 0xE8	; 232
  d6:	93 e0       	ldi	r25, 0x03	; 3
  d8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <wait>
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_slaveSelect>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 0d 01 	call	0x21a	; 0x21a <spi_slaveDeSelect>
  f4:	88 ee       	ldi	r24, 0xE8	; 232
  f6:	93 e0       	ldi	r25, 0x03	; 3
  f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <wait>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_slaveSelect>
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 0d 01 	call	0x21a	; 0x21a <spi_slaveDeSelect>
 114:	88 ee       	ldi	r24, 0xE8	; 232
 116:	93 e0       	ldi	r25, 0x03	; 3
 118:	0e 94 e7 00 	call	0x1ce	; 0x1ce <wait>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_slaveSelect>
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 0d 01 	call	0x21a	; 0x21a <spi_slaveDeSelect>
 134:	88 ee       	ldi	r24, 0xE8	; 232
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	0e 94 e7 00 	call	0x1ce	; 0x1ce <wait>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <spi_slaveSelect>
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	0e 94 18 01 	call	0x230	; 0x230 <spi_write>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 0d 01 	call	0x21a	; 0x21a <spi_slaveDeSelect>
 154:	88 ee       	ldi	r24, 0xE8	; 232
 156:	93 e0       	ldi	r25, 0x03	; 3
 158:	0e 94 e7 00 	call	0x1ce	; 0x1ce <wait>
 15c:	88 ee       	ldi	r24, 0xE8	; 232
 15e:	93 e0       	ldi	r25, 0x03	; 3
 160:	0e 94 e7 00 	call	0x1ce	; 0x1ce <wait>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	cf 91       	pop	r28
 16a:	08 95       	ret
