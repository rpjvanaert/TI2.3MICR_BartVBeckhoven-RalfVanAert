
B.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000197  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b32  00000000  00000000  000001bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000830  00000000  00000000  00000cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000296  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000017b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000008e  00000000  00000000  00001a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000110  00000110  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000000e4  000000e4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000038  000000ac  000000ac  00000100  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data.show 00000008  000000a4  000000a4  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.libgcc  0000000e  00000102  00000102  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  60:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  68:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  6c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  70:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  74:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  7c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  80:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  84:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  88:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 56 00 	call	0xac	; 0xac <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000000e4 <wait>:
		0b00001000,
		0b00000100,
};

void wait(int ms){
	for (int i = 0; i < ms; i++){
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	08 c0       	rjmp	.+16     	; 0xfa <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	ef ec       	ldi	r30, 0xCF	; 207
  ec:	f7 e0       	ldi	r31, 0x07	; 7
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <wait+0xa>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <wait+0x10>
  f4:	00 00       	nop
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	28 17       	cp	r18, r24
  fc:	39 07       	cpc	r19, r25
  fe:	ac f3       	brlt	.-22     	; 0xea <wait+0x6>
		_delay_ms(1);
	}
}
 100:	08 95       	ret

Disassembly of section .text.main:

000000ac <main>:

int main(void)
{
	DDRD = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	81 bb       	out	0x11, r24	; 17
	
	int index = 0;
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	d0 e0       	ldi	r29, 0x00	; 0
	
    while(1)
    {
         PORTD = show[index];
  b4:	ce 01       	movw	r24, r28
  b6:	0d 2e       	mov	r0, r29
  b8:	00 0c       	add	r0, r0
  ba:	aa 0b       	sbc	r26, r26
  bc:	8c 55       	subi	r24, 0x5C	; 92
  be:	9f 4f       	sbci	r25, 0xFF	; 255
  c0:	af 4f       	sbci	r26, 0xFF	; 255
  c2:	fc 01       	movw	r30, r24
  c4:	5a 2f       	mov	r21, r26
  c6:	0e 94 81 00 	call	0x102	; 0x102 <__xload_1>
  ca:	62 bb       	out	0x12, r22	; 18
		 
		 if (index == 7){
  cc:	c7 30       	cpi	r28, 0x07	; 7
  ce:	d1 05       	cpc	r29, r1
  d0:	11 f0       	breq	.+4      	; 0xd6 <main+0x2a>
			index = 0;
		 } else {
			 ++index;
  d2:	21 96       	adiw	r28, 0x01	; 1
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x2e>
    while(1)
    {
         PORTD = show[index];
		 
		 if (index == 7){
			index = 0;
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	d0 e0       	ldi	r29, 0x00	; 0
		 } else {
			 ++index;
		 }
		 wait(200);
  da:	88 ec       	ldi	r24, 0xC8	; 200
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 72 00 	call	0xe4	; 0xe4 <wait>
    }
  e2:	e8 cf       	rjmp	.-48     	; 0xb4 <main+0x8>

Disassembly of section .text.libgcc:

00000102 <__xload_1>:
 102:	57 fd       	sbrc	r21, 7
 104:	03 c0       	rjmp	.+6      	; 0x10c <__xload_1+0xa>
 106:	5b bf       	out	0x3b, r21	; 59
 108:	67 91       	elpm	r22, Z+
 10a:	08 95       	ret
 10c:	60 81       	ld	r22, Z
 10e:	08 95       	ret
