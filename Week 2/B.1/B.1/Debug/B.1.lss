
B.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000197  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b19  00000000  00000000  000001cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000819  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002d5  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e2  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000110  00000110  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_3 00000028  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_2 00000028  000000cc  000000cc  00000120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000001c  000000f4  000000f4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_2>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_etext>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  60:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  68:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  6c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  70:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  74:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  7c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  80:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  84:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  88:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_3:

000000a4 <__vector_3>:
inputs:
outputs:
notes:			Set PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT2_vect ) {
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
    if (PORTC >= 0x80)
  b0:	af 9b       	sbis	0x15, 7	; 21
  b2:	03 c0       	rjmp	.+6      	; 0xba <__vector_3+0x16>
    {
	    PORTC = 0x01;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	85 bb       	out	0x15, r24	; 21
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <__vector_3+0x1c>
    } else
    {
	    PORTC <<= 1;
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	88 0f       	add	r24, r24
  be:	85 bb       	out	0x15, r24	; 21
    }
}
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

Disassembly of section .text.__vector_2:

000000cc <__vector_2>:
inputs:
outputs:
notes:			Clear PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT1_vect ) {
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
    if (PORTC >= 0x80)
  d8:	af 9b       	sbis	0x15, 7	; 21
  da:	03 c0       	rjmp	.+6      	; 0xe2 <__vector_2+0x16>
    {
	    PORTC = 0x01;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	85 bb       	out	0x15, r24	; 21
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <__vector_2+0x1c>
    } else
    {
	    PORTC <<= 1;
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	88 0f       	add	r24, r24
  e6:	85 bb       	out	0x15, r24	; 21
    }		
}
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

Disassembly of section .text.main:

000000f4 <main>:
notes:			Slow background task after init ISR
Version :    	DMK, Initial code
*******************************************************************/
int main( void ) {
	// Init I/O
	DDRC = 0xFF;			// PORTC(7:0) output
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	84 bb       	out	0x14, r24	; 20

	// Init Interrupt hardware
	EICRA |= 0x3C;			// INT1 rising edge, INT2 rising edge
  f8:	ea e6       	ldi	r30, 0x6A	; 106
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8c 63       	ori	r24, 0x3C	; 60
 100:	80 83       	st	Z, r24
	EIMSK |= 0x06;			// Enable INT1 & INT2
 102:	89 b7       	in	r24, 0x39	; 57
 104:	86 60       	ori	r24, 0x06	; 6
 106:	89 bf       	out	0x39, r24	; 57
	
	// Enable global interrupt system
	//SREG = 0x80;			// Of direct via SREG of via wrapper
	sei();	
 108:	78 94       	sei
	
	PORTC = 0b1;			
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	ff cf       	rjmp	.-2      	; 0x10e <main+0x1a>
