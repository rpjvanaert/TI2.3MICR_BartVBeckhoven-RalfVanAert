
LCD_TEST_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000235  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000cdb  00000000  00000000  0000027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000879  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003b5  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000009c  00000000  00000000  00001b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001b4  00000000  00000000  00001ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00002055  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001ae  000001ae  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  00000156  00000156  000001aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init_4bits_mode 0000003e  000000b4  000000b4  00000108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_data 00000024  0000017c  0000017c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_string 0000002e  00000128  00000128  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .progmemx.data 00000010  000000a4  000000a4  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 18 .text.main    00000036  000000f2  000000f2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.libgcc  0000000e  000001a0  000001a0  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  54:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  58:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  5c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  60:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  64:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  68:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  6c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  70:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  74:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  7c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  80:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  84:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  88:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000001ae <__bad_interrupt>:
 1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.lcd_strobe_lcd_e:

00000156 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);	// E high
 156:	85 b3       	in	r24, 0x15	; 21
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f ec       	ldi	r24, 0xCF	; 207
 15e:	97 e0       	ldi	r25, 0x07	; 7
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_strobe_lcd_e+0xa>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_strobe_lcd_e+0x10>
 166:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	87 7f       	andi	r24, 0xF7	; 247
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	8f ec       	ldi	r24, 0xCF	; 207
 170:	97 e0       	ldi	r25, 0x07	; 7
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_strobe_lcd_e+0x1c>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_strobe_lcd_e+0x22>
 178:	00 00       	nop
 17a:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

000000b4 <init_4bits_mode>:

	// Second nibble
	PORTC = (byte<<4);
	PORTC &= ~(1<<LCD_RS);
	lcd_strobe_lcd_e();
}
  b4:	cf 93       	push	r28
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 bb       	out	0x14, r24	; 20
  ba:	15 ba       	out	0x15, r1	; 21
  bc:	c0 e2       	ldi	r28, 0x20	; 32
  be:	c5 bb       	out	0x15, r28	; 21
  c0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_strobe_lcd_e>
  c4:	c5 bb       	out	0x15, r28	; 21
  c6:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_strobe_lcd_e>
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_strobe_lcd_e>
  d2:	15 ba       	out	0x15, r1	; 21
  d4:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_strobe_lcd_e>
  d8:	80 ef       	ldi	r24, 0xF0	; 240
  da:	85 bb       	out	0x15, r24	; 21
  dc:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_strobe_lcd_e>
  e0:	15 ba       	out	0x15, r1	; 21
  e2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_strobe_lcd_e>
  e6:	80 e6       	ldi	r24, 0x60	; 96
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_strobe_lcd_e>
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

Disassembly of section .text.lcd_write_data:

0000017c <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 17c:	cf 93       	push	r28
 17e:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 180:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 182:	85 b3       	in	r24, 0x15	; 21
 184:	84 60       	ori	r24, 0x04	; 4
 186:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 188:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 18c:	c2 95       	swap	r28
 18e:	c0 7f       	andi	r28, 0xF0	; 240
 190:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 192:	85 b3       	in	r24, 0x15	; 21
 194:	84 60       	ori	r24, 0x04	; 4
 196:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 198:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_strobe_lcd_e>
}
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

Disassembly of section .text.lcd_write_string:

00000128 <lcd_write_string>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_string(const char *str) {
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	6b 01       	movw	r12, r22
 130:	e8 2e       	mov	r14, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 132:	07 c0       	rjmp	.+14     	; 0x142 <lcd_write_string+0x1a>
		lcd_write_data(*str);
 134:	86 2f       	mov	r24, r22
 136:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	c8 1a       	sub	r12, r24
 13e:	d8 0a       	sbc	r13, r24
 140:	e8 0a       	sbc	r14, r24
 142:	f6 01       	movw	r30, r12
 144:	5e 2d       	mov	r21, r14
 146:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__xload_1>
 14a:	61 11       	cpse	r22, r1
 14c:	f3 cf       	rjmp	.-26     	; 0x134 <lcd_write_string+0xc>
		lcd_write_data(*str);
	}
}
 14e:	ef 90       	pop	r14
 150:	df 90       	pop	r13
 152:	cf 90       	pop	r12
 154:	08 95       	ret

Disassembly of section .text.main:

000000f2 <main>:
notes:			Slow background task after init ISR
Version :    	DMK, Initial code
*******************************************************************/
int main( void ) {
	// Init I/O
	DDRD = 0xFF;			// PORTD(7) output, PORTD(6:0) input
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	81 bb       	out	0x11, r24	; 17

	// Init LCD
	init_4bits_mode();
  f6:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_4bits_mode>

	// Write sample string
	lcd_write_string("Yedi you am not");
  fa:	64 ea       	ldi	r22, 0xA4	; 164
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 94 00 	call	0x128	; 0x128 <lcd_write_string>
	lcd_write_string("Yedi you am not");
 104:	64 ea       	ldi	r22, 0xA4	; 164
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 94 00 	call	0x128	; 0x128 <lcd_write_string>

	// Loop forever
	while (1) {
		PORTD ^= (1<<7);	// Toggle PORTD.7
 10e:	82 b3       	in	r24, 0x12	; 18
 110:	80 58       	subi	r24, 0x80	; 128
 112:	82 bb       	out	0x12, r24	; 18
 114:	2f e7       	ldi	r18, 0x7F	; 127
 116:	8a e1       	ldi	r24, 0x1A	; 26
 118:	96 e0       	ldi	r25, 0x06	; 6
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x28>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x32>
 124:	00 00       	nop
 126:	f3 cf       	rjmp	.-26     	; 0x10e <main+0x1c>

Disassembly of section .text.libgcc:

000001a0 <__xload_1>:
 1a0:	57 fd       	sbrc	r21, 7
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <__xload_1+0xa>
 1a4:	5b bf       	out	0x3b, r21	; 59
 1a6:	67 91       	elpm	r22, Z+
 1a8:	08 95       	ret
 1aa:	60 81       	ld	r22, Z
 1ac:	08 95       	ret
