
B.5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000294  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  000002c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000010e1  00000000  00000000  00000333  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000097d  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004ea  00000000  00000000  00001d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  0000227c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a6  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000028c  00000000  00000000  000025f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  0000287e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000021c  0000021c  00000290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .progmemx.data 00000009  000000a4  000000a4  00000118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 14 .text.main    00000068  000000ae  000000ae  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_strobe_lcd_e 00000026  00000182  00000182  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_command 00000024  000001a8  000001a8  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init    0000003e  00000116  00000116  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write_data 00000024  000001cc  000001cc  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.display_text 0000002e  00000154  00000154  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_clear 0000001e  000001f0  000001f0  00000264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.libgcc  0000000e  0000020e  0000020e  00000282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 57 00 	call	0xae	; 0xae <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000ae <main>:
#include <util/delay.h>
#include "micr_lcd.h"

int main(void)
{
	lcd_clear();
  ae:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f e7       	ldi	r18, 0x7F	; 127
  b4:	8a e1       	ldi	r24, 0x1A	; 26
  b6:	96 e0       	ldi	r25, 0x06	; 6
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0xa>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x14>
  c2:	00 00       	nop
	_delay_ms(250);
	init();
  c4:	0e 94 8b 00 	call	0x116	; 0x116 <init>
  c8:	2f e7       	ldi	r18, 0x7F	; 127
  ca:	8a e1       	ldi	r24, 0x1A	; 26
  cc:	96 e0       	ldi	r25, 0x06	; 6
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x20>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x2a>
  d8:	00 00       	nop
	_delay_ms( 250 );
	lcd_write_command(0x02);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_write_command>
  e0:	2f e7       	ldi	r18, 0x7F	; 127
  e2:	8a e1       	ldi	r24, 0x1A	; 26
  e4:	96 e0       	ldi	r25, 0x06	; 6
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x38>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x42>
  f0:	00 00       	nop
	_delay_ms( 250 );
	display_text("LCD I am");
  f2:	64 ea       	ldi	r22, 0xA4	; 164
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 aa 00 	call	0x154	; 0x154 <display_text>
	
	
    while(1)
    {
		PORTD ^= (1<<7);	// Toggle PORTD.7
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	80 58       	subi	r24, 0x80	; 128
 100:	82 bb       	out	0x12, r24	; 18
 102:	2f e7       	ldi	r18, 0x7F	; 127
 104:	8a e1       	ldi	r24, 0x1A	; 26
 106:	96 e0       	ldi	r25, 0x06	; 6
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x5a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x64>
 112:	00 00       	nop
 114:	f3 cf       	rjmp	.-26     	; 0xfc <main+0x4e>

Disassembly of section .text.lcd_strobe_lcd_e:

00000182 <lcd_strobe_lcd_e>:
	for(;*str; str++){
		lcd_write_data(*str);
	}	
}

void set_cursor(int position){
 182:	85 b3       	in	r24, 0x15	; 21
 184:	88 60       	ori	r24, 0x08	; 8
 186:	85 bb       	out	0x15, r24	; 21
 188:	8f ec       	ldi	r24, 0xCF	; 207
 18a:	97 e0       	ldi	r25, 0x07	; 7
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_strobe_lcd_e+0xa>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_strobe_lcd_e+0x10>
 192:	00 00       	nop
 194:	85 b3       	in	r24, 0x15	; 21
 196:	87 7f       	andi	r24, 0xF7	; 247
 198:	85 bb       	out	0x15, r24	; 21
 19a:	8f ec       	ldi	r24, 0xCF	; 207
 19c:	97 e0       	ldi	r25, 0x07	; 7
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_strobe_lcd_e+0x1c>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_strobe_lcd_e+0x22>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

Disassembly of section .text.lcd_write_command:

000001a8 <lcd_write_command>:
 1a8:	cf 93       	push	r28
 1aa:	c8 2f       	mov	r28, r24
 1ac:	85 bb       	out	0x15, r24	; 21
 1ae:	85 b3       	in	r24, 0x15	; 21
 1b0:	8b 7f       	andi	r24, 0xFB	; 251
 1b2:	85 bb       	out	0x15, r24	; 21
 1b4:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 1b8:	c2 95       	swap	r28
 1ba:	c0 7f       	andi	r28, 0xF0	; 240
 1bc:	c5 bb       	out	0x15, r28	; 21
 1be:	85 b3       	in	r24, 0x15	; 21
 1c0:	8b 7f       	andi	r24, 0xFB	; 251
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

Disassembly of section .text.init:

00000116 <init>:
 116:	cf 93       	push	r28
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	15 ba       	out	0x15, r1	; 21
 11e:	c0 e2       	ldi	r28, 0x20	; 32
 120:	c5 bb       	out	0x15, r28	; 21
 122:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 126:	c5 bb       	out	0x15, r28	; 21
 128:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	85 bb       	out	0x15, r24	; 21
 130:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 134:	15 ba       	out	0x15, r1	; 21
 136:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 13a:	80 ef       	ldi	r24, 0xF0	; 240
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 142:	15 ba       	out	0x15, r1	; 21
 144:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 148:	80 e6       	ldi	r24, 0x60	; 96
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 150:	cf 91       	pop	r28
 152:	08 95       	ret

Disassembly of section .text.lcd_write_data:

000001cc <lcd_write_data>:
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
 1d0:	85 bb       	out	0x15, r24	; 21
 1d2:	85 b3       	in	r24, 0x15	; 21
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	85 bb       	out	0x15, r24	; 21
 1d8:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 1dc:	c2 95       	swap	r28
 1de:	c0 7f       	andi	r28, 0xF0	; 240
 1e0:	c5 bb       	out	0x15, r28	; 21
 1e2:	85 b3       	in	r24, 0x15	; 21
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	85 bb       	out	0x15, r24	; 21
 1e8:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

Disassembly of section .text.display_text:

00000154 <display_text>:
 154:	cf 92       	push	r12
 156:	df 92       	push	r13
 158:	ef 92       	push	r14
 15a:	6b 01       	movw	r12, r22
 15c:	e8 2e       	mov	r14, r24
 15e:	07 c0       	rjmp	.+14     	; 0x16e <display_text+0x1a>
 160:	86 2f       	mov	r24, r22
 162:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_write_data>
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	c8 1a       	sub	r12, r24
 16a:	d8 0a       	sbc	r13, r24
 16c:	e8 0a       	sbc	r14, r24
 16e:	f6 01       	movw	r30, r12
 170:	5e 2d       	mov	r21, r14
 172:	0e 94 07 01 	call	0x20e	; 0x20e <__xload_1>
 176:	61 11       	cpse	r22, r1
 178:	f3 cf       	rjmp	.-26     	; 0x160 <display_text+0xc>
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	08 95       	ret

Disassembly of section .text.lcd_clear:

000001f0 <lcd_clear>:
	
}

void lcd_clear() {
	PORTC = 0x00;
 1f0:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 1f2:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
	PORTC = 0x01;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 1fa:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
	PORTC = 0x00;
 1fe:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 200:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
	PORTC = 0x02;
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 208:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_strobe_lcd_e>
 20c:	08 95       	ret

Disassembly of section .text.libgcc:

0000020e <__xload_1>:
 20e:	57 fd       	sbrc	r21, 7
 210:	03 c0       	rjmp	.+6      	; 0x218 <__xload_1+0xa>
 212:	5b bf       	out	0x3b, r21	; 59
 214:	67 91       	elpm	r22, Z+
 216:	08 95       	ret
 218:	60 81       	ld	r22, Z
 21a:	08 95       	ret
