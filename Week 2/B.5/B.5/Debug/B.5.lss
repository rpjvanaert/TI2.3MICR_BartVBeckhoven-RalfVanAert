
B.5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  0000028f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000104e  00000000  00000000  000002f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000097f  00000000  00000000  00001345  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000497  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  0000215c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000029c  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000244  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001e8  000001e8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002744  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .progmemx.data 00000009  000000a4  000000a4  00000118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 14 .text.main    00000052  000000ae  000000ae  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_strobe_lcd_e 00000026  0000016c  0000016c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_command 00000024  00000192  00000192  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init    0000003e  00000100  00000100  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write_data 00000024  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.display_text 0000002e  0000013e  0000013e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.libgcc  0000000e  000001da  000001da  0000024e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
   8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
   c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  10:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  14:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  18:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  1c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  20:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  24:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  28:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  2c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  30:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  34:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  38:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  3c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  40:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  44:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  48:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  4c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  50:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  54:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  58:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  5c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  60:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  64:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  68:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  6c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  70:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  74:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  78:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  7c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  80:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  84:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
  88:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 57 00 	call	0xae	; 0xae <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000001e8 <__bad_interrupt>:
 1e8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000ae <main>:
#include <util/delay.h>
#include "micr_lcd.h"

int main(void)
{
	init();
  ae:	0e 94 80 00 	call	0x100	; 0x100 <init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f e7       	ldi	r18, 0x7F	; 127
  b4:	8a e1       	ldi	r24, 0x1A	; 26
  b6:	96 e0       	ldi	r25, 0x06	; 6
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0xa>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x14>
  c2:	00 00       	nop
	_delay_ms( 250 );
	lcd_write_command(0x02);
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_write_command>
  ca:	2f e7       	ldi	r18, 0x7F	; 127
  cc:	8a e1       	ldi	r24, 0x1A	; 26
  ce:	96 e0       	ldi	r25, 0x06	; 6
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x22>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x2c>
  da:	00 00       	nop
	_delay_ms( 250 );
	display_text("LCD I am");
  dc:	64 ea       	ldi	r22, 0xA4	; 164
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 9f 00 	call	0x13e	; 0x13e <display_text>
	
	
    while(1)
    {
		PORTD ^= (1<<7);	// Toggle PORTD.7
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	80 58       	subi	r24, 0x80	; 128
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	2f e7       	ldi	r18, 0x7F	; 127
  ee:	8a e1       	ldi	r24, 0x1A	; 26
  f0:	96 e0       	ldi	r25, 0x06	; 6
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x44>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x4e>
  fc:	00 00       	nop
  fe:	f3 cf       	rjmp	.-26     	; 0xe6 <main+0x38>

Disassembly of section .text.lcd_strobe_lcd_e:

0000016c <lcd_strobe_lcd_e>:

#define LCD_E 	3
#define LCD_RS	2

void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);	// E high
 16c:	85 b3       	in	r24, 0x15	; 21
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	85 bb       	out	0x15, r24	; 21
 172:	8f ec       	ldi	r24, 0xCF	; 207
 174:	97 e0       	ldi	r25, 0x07	; 7
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_strobe_lcd_e+0xa>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_strobe_lcd_e+0x10>
 17c:	00 00       	nop
	_delay_ms(1);			//
	PORTC &= ~(1<<LCD_E);  	// E low
 17e:	85 b3       	in	r24, 0x15	; 21
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	85 bb       	out	0x15, r24	; 21
 184:	8f ec       	ldi	r24, 0xCF	; 207
 186:	97 e0       	ldi	r25, 0x07	; 7
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_strobe_lcd_e+0x1c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_strobe_lcd_e+0x22>
 18e:	00 00       	nop
 190:	08 95       	ret

Disassembly of section .text.lcd_write_command:

00000192 <lcd_write_command>:
	_delay_ms(1);			//
}

void lcd_write_command(unsigned char byte) {
 192:	cf 93       	push	r28
 194:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 196:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 198:	85 b3       	in	r24, 0x15	; 21
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 19e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1a2:	c2 95       	swap	r28
 1a4:	c0 7f       	andi	r28, 0xF0	; 240
 1a6:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	8b 7f       	andi	r24, 0xFB	; 251
 1ac:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 1ae:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_strobe_lcd_e>
}
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

Disassembly of section .text.init:

00000100 <init>:

void init(){
 100:	cf 93       	push	r28
	DDRC = 0xFF;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 106:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 108:	c0 e2       	ldi	r28, 0x20	; 32
 10a:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 10c:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 110:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 112:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_strobe_lcd_e>
	PORTC = 0x80;
 116:	80 e8       	ldi	r24, 0x80	; 128
 118:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 11a:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 11e:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 120:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 124:	80 ef       	ldi	r24, 0xF0	; 240
 126:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 128:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 12c:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 12e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_strobe_lcd_e>
	PORTC = 0x60;
 132:	80 e6       	ldi	r24, 0x60	; 96
 134:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 136:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_strobe_lcd_e>
}
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

Disassembly of section .text.lcd_write_data:

000001b6 <lcd_write_data>:

void lcd_write_data(unsigned char byte) {
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 1ba:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 1bc:	85 b3       	in	r24, 0x15	; 21
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 1c2:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 1c6:	c2 95       	swap	r28
 1c8:	c0 7f       	andi	r28, 0xF0	; 240
 1ca:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 1cc:	85 b3       	in	r24, 0x15	; 21
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 1d2:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_strobe_lcd_e>
}
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

Disassembly of section .text.display_text:

0000013e <display_text>:

void display_text(const char *str){
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	6b 01       	movw	r12, r22
 146:	e8 2e       	mov	r14, r24
	for(;*str; str++){
 148:	07 c0       	rjmp	.+14     	; 0x158 <display_text+0x1a>
		lcd_write_data(*str);
 14a:	86 2f       	mov	r24, r22
 14c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_write_data>
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
}

void display_text(const char *str){
	for(;*str; str++){
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	c8 1a       	sub	r12, r24
 154:	d8 0a       	sbc	r13, r24
 156:	e8 0a       	sbc	r14, r24
 158:	f6 01       	movw	r30, r12
 15a:	5e 2d       	mov	r21, r14
 15c:	0e 94 ed 00 	call	0x1da	; 0x1da <__xload_1>
 160:	61 11       	cpse	r22, r1
 162:	f3 cf       	rjmp	.-26     	; 0x14a <display_text+0xc>
		lcd_write_data(*str);
	}	
}
 164:	ef 90       	pop	r14
 166:	df 90       	pop	r13
 168:	cf 90       	pop	r12
 16a:	08 95       	ret

Disassembly of section .text.libgcc:

000001da <__xload_1>:
 1da:	57 fd       	sbrc	r21, 7
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <__xload_1+0xa>
 1de:	5b bf       	out	0x3b, r21	; 59
 1e0:	67 91       	elpm	r22, Z+
 1e2:	08 95       	ret
 1e4:	60 81       	ld	r22, Z
 1e6:	08 95       	ret
