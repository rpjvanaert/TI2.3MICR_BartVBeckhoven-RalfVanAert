
B6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000bb5  00000000  00000000  000001d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000843  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ee  00000000  00000000  000015cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  000018bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000116  00000000  00000000  00001b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000011c  0000011c  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000000e6  000000e6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.waitHz  00000018  00000104  00000104  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000042  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
   8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
   c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  10:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  18:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  1c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  20:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  24:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  28:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  2c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  30:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  34:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  38:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  3c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  40:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  44:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  48:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  4c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  50:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  54:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  58:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  5c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  60:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  68:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  6c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  70:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  74:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  7c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  80:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  84:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  88:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

0000011c <__bad_interrupt>:
 11c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000000e6 <wait>:
#include <xc.h>
#include <avr/io.h>
#include <util/delay.h>

void wait (int ms) {
	for (int i = 0; i<ms; i++){
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	08 c0       	rjmp	.+16     	; 0xfc <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	ef ec       	ldi	r30, 0xCF	; 207
  ee:	f7 e0       	ldi	r31, 0x07	; 7
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <wait+0xa>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <wait+0x10>
  f6:	00 00       	nop
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	28 17       	cp	r18, r24
  fe:	39 07       	cpc	r19, r25
 100:	ac f3       	brlt	.-22     	; 0xec <wait+0x6>
		_delay_ms(1);
	}
}
 102:	08 95       	ret

Disassembly of section .text.waitHz:

00000104 <waitHz>:

void waitHz (int hz) {
	if (hz == 1){
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	29 f4       	brne	.+10     	; 0x112 <waitHz+0xe>
		wait(length1hz);
 108:	84 ef       	ldi	r24, 0xF4	; 244
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 73 00 	call	0xe6	; 0xe6 <wait>
 110:	08 95       	ret
		} else {
		wait(length4hz);
 112:	8d e7       	ldi	r24, 0x7D	; 125
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 73 00 	call	0xe6	; 0xe6 <wait>
 11a:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:
	}
}

int main(void)
{
	DDRD = 0b11111111;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000000;
  a8:	14 ba       	out	0x14, r1	; 20

	int prevValPinC0 = 0;
	int currentHz = 1;
  aa:	01 e0       	ldi	r16, 0x01	; 1
  ac:	10 e0       	ldi	r17, 0x00	; 0
int main(void)
{
	DDRD = 0b11111111;
	DDRC = 0b00000000;

	int prevValPinC0 = 0;
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
	int currentHz = 1;
	
    while(1)
    {		
		int valPinC0 = PINC;
  b2:	c3 b3       	in	r28, 0x13	; 19
  b4:	d0 e0       	ldi	r29, 0x00	; 0
		
		if (valPinC0 == 1 && prevValPinC0 == 0)
  b6:	c1 30       	cpi	r28, 0x01	; 1
  b8:	d1 05       	cpc	r29, r1
  ba:	51 f4       	brne	.+20     	; 0xd0 <main+0x2c>
  bc:	89 2b       	or	r24, r25
  be:	41 f4       	brne	.+16     	; 0xd0 <main+0x2c>
		{
			
			
			if (currentHz == 1)
  c0:	01 30       	cpi	r16, 0x01	; 1
  c2:	11 05       	cpc	r17, r1
  c4:	19 f4       	brne	.+6      	; 0xcc <main+0x28>
			{
				currentHz = 4;
  c6:	04 e0       	ldi	r16, 0x04	; 4
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <main+0x2c>
			} else
			{
				currentHz = 1;
  cc:	01 e0       	ldi	r16, 0x01	; 1
  ce:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		prevValPinC0 = valPinC0;
		
		PORTD = 0x80;
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	82 bb       	out	0x12, r24	; 18
		waitHz(currentHz);
  d4:	c8 01       	movw	r24, r16
  d6:	0e 94 82 00 	call	0x104	; 0x104 <waitHz>
		PORTD = 0x00;
  da:	12 ba       	out	0x12, r1	; 18
		waitHz(currentHz);
  dc:	c8 01       	movw	r24, r16
  de:	0e 94 82 00 	call	0x104	; 0x104 <waitHz>
			} else
			{
				currentHz = 1;
			}
		}
		prevValPinC0 = valPinC0;
  e2:	ce 01       	movw	r24, r28
		
		PORTD = 0x80;
		waitHz(currentHz);
		PORTD = 0x00;
		waitHz(currentHz);
    }	
  e4:	e6 cf       	rjmp	.-52     	; 0xb2 <main+0xe>
