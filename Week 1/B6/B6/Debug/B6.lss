
B6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b78  00000000  00000000  000001fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000843  00000000  00000000  00000d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000030e  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000015a  00000000  00000000  00001b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000014c  0000014c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000012e  0000012e  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    0000008a  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

0000014c <__bad_interrupt>:
 14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.wait:

0000012e <wait>:
#include <xc.h>
#include <avr/io.h>
#include <util/delay.h>

void wait (int ms) {
	for (int i = 0; i<ms; i++){
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	08 c0       	rjmp	.+16     	; 0x144 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	ef ec       	ldi	r30, 0xCF	; 207
 136:	f7 e0       	ldi	r31, 0x07	; 7
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <wait+0xa>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <wait+0x10>
 13e:	00 00       	nop
 140:	2f 5f       	subi	r18, 0xFF	; 255
 142:	3f 4f       	sbci	r19, 0xFF	; 255
 144:	28 17       	cp	r18, r24
 146:	39 07       	cpc	r19, r25
 148:	ac f3       	brlt	.-22     	; 0x134 <wait+0x6>
		_delay_ms(1);
	}
}
 14a:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:

int main(void)
{
	DDRD = 0b11111111;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000000;
  a8:	14 ba       	out	0x14, r1	; 20

	int pressed = 0;
	int length1hz = 500;
	int length4hz = 125;
	int currentHz = 1;
  aa:	c1 e0       	ldi	r28, 0x01	; 1
  ac:	d0 e0       	ldi	r29, 0x00	; 0
int main(void)
{
	DDRD = 0b11111111;
	DDRC = 0b00000000;

	int pressed = 0;
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	10 e0       	ldi	r17, 0x00	; 0
	int length4hz = 125;
	int currentHz = 1;
	
    while(1)
    {		
		int valPinC0 = PINC;
  b2:	83 b3       	in	r24, 0x13	; 19
		
		if (valPinC0 == 0x01){
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	61 f4       	brne	.+24     	; 0xd0 <main+0x2c>
			
			if (pressed == 0){
  b8:	01 15       	cp	r16, r1
  ba:	11 05       	cpc	r17, r1
  bc:	41 f5       	brne	.+80     	; 0x10e <main+0x6a>
				pressed = 1;
				if (currentHz == 1){
  be:	c1 30       	cpi	r28, 0x01	; 1
  c0:	d1 05       	cpc	r29, r1
  c2:	91 f0       	breq	.+36     	; 0xe8 <main+0x44>
					currentHz = 4;
					} else if (currentHz == 4){
  c4:	c4 30       	cpi	r28, 0x04	; 4
  c6:	d1 05       	cpc	r29, r1
  c8:	a1 f0       	breq	.+40     	; 0xf2 <main+0x4e>
		int valPinC0 = PINC;
		
		if (valPinC0 == 0x01){
			
			if (pressed == 0){
				pressed = 1;
  ca:	01 e0       	ldi	r16, 0x01	; 1
  cc:	10 e0       	ldi	r17, 0x00	; 0
  ce:	1f c0       	rjmp	.+62     	; 0x10e <main+0x6a>
					} else if (currentHz == 4){
					currentHz = 1;
				}
			}
		} else {
			if (pressed == 1){
  d0:	01 30       	cpi	r16, 0x01	; 1
  d2:	11 05       	cpc	r17, r1
  d4:	e1 f4       	brne	.+56     	; 0x10e <main+0x6a>
				pressed = 0;
				if (currentHz == 1){
  d6:	c1 30       	cpi	r28, 0x01	; 1
  d8:	d1 05       	cpc	r29, r1
  da:	81 f0       	breq	.+32     	; 0xfc <main+0x58>
					currentHz = 4;
					} else if (currentHz == 4){
  dc:	c4 30       	cpi	r28, 0x04	; 4
  de:	d1 05       	cpc	r29, r1
  e0:	91 f0       	breq	.+36     	; 0x106 <main+0x62>
					currentHz = 1;
				}
			}
		} else {
			if (pressed == 1){
				pressed = 0;
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	13 c0       	rjmp	.+38     	; 0x10e <main+0x6a>
		if (valPinC0 == 0x01){
			
			if (pressed == 0){
				pressed = 1;
				if (currentHz == 1){
					currentHz = 4;
  e8:	c4 e0       	ldi	r28, 0x04	; 4
  ea:	d0 e0       	ldi	r29, 0x00	; 0
		int valPinC0 = PINC;
		
		if (valPinC0 == 0x01){
			
			if (pressed == 0){
				pressed = 1;
  ec:	01 e0       	ldi	r16, 0x01	; 1
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	0e c0       	rjmp	.+28     	; 0x10e <main+0x6a>
				if (currentHz == 1){
					currentHz = 4;
					} else if (currentHz == 4){
					currentHz = 1;
  f2:	c1 e0       	ldi	r28, 0x01	; 1
  f4:	d0 e0       	ldi	r29, 0x00	; 0
		int valPinC0 = PINC;
		
		if (valPinC0 == 0x01){
			
			if (pressed == 0){
				pressed = 1;
  f6:	01 e0       	ldi	r16, 0x01	; 1
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	09 c0       	rjmp	.+18     	; 0x10e <main+0x6a>
			}
		} else {
			if (pressed == 1){
				pressed = 0;
				if (currentHz == 1){
					currentHz = 4;
  fc:	c4 e0       	ldi	r28, 0x04	; 4
  fe:	d0 e0       	ldi	r29, 0x00	; 0
					currentHz = 1;
				}
			}
		} else {
			if (pressed == 1){
				pressed = 0;
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	04 c0       	rjmp	.+8      	; 0x10e <main+0x6a>
				if (currentHz == 1){
					currentHz = 4;
					} else if (currentHz == 4){
					currentHz = 1;
 106:	c1 e0       	ldi	r28, 0x01	; 1
 108:	d0 e0       	ldi	r29, 0x00	; 0
					currentHz = 1;
				}
			}
		} else {
			if (pressed == 1){
				pressed = 0;
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	10 e0       	ldi	r17, 0x00	; 0
					currentHz = 1;
				}
			}
		}
			
			PORTD = 0x80;
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	82 bb       	out	0x12, r24	; 18
			if (currentHz == 1){
 112:	c1 30       	cpi	r28, 0x01	; 1
 114:	d1 05       	cpc	r29, r1
 116:	29 f4       	brne	.+10     	; 0x122 <main+0x7e>
				wait(length1hz);
 118:	84 ef       	ldi	r24, 0xF4	; 244
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 97 00 	call	0x12e	; 0x12e <wait>
 120:	04 c0       	rjmp	.+8      	; 0x12a <main+0x86>
				} else {
				wait(length4hz);
 122:	8d e7       	ldi	r24, 0x7D	; 125
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 97 00 	call	0x12e	; 0x12e <wait>
			}
			PORTD = 0x00;
 12a:	12 ba       	out	0x12, r1	; 18
    }	
 12c:	c2 cf       	rjmp	.-124    	; 0xb2 <main+0xe>
